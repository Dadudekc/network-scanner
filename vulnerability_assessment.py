# D:\network-scanner\vulnerability_assessment.py

import requests
from packaging import version
import sqlite3

# Database setup
DATABASE_PATH = "vulnerabilities.db"

def initialize_database():
    """
    Initializes the SQLite database to store vulnerability data.
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS vulnerabilities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        cve_id TEXT NOT NULL,
        description TEXT NOT NULL,
        service_name TEXT NOT NULL,
        service_version TEXT NOT NULL
    )
    """)
    conn.commit()
    conn.close()

def fetch_vulnerability_data():
    """
    Fetches vulnerability data from an external API and stores it in the database.
    Replace the example data with real API requests (e.g., NVD API).
    """
    # Example vulnerability data
    example_vulnerability_data = [
        {'cve_id': 'CVE-2021-1234', 'description': 'Example vulnerability affecting nginx 1.16.1', 
         'affected_software': [{'name': 'nginx', 'version': '1.16.1'}]}
    ]
    
    # Store fetched data in the database
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    for vuln in example_vulnerability_data:
        for software in vuln['affected_software']:
            cursor.execute("""
            INSERT INTO vulnerabilities (cve_id, description, service_name, service_version)
            VALUES (?, ?, ?, ?)
            """, (vuln['cve_id'], vuln['description'], software['name'], software['version']))
    conn.commit()
    conn.close()

def assess_vulnerabilities(service_name, service_version):
    """
    Identifies vulnerabilities for a given service and version by querying the database.
    """
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    SELECT cve_id, description FROM vulnerabilities
    WHERE service_name = ? AND service_version = ?
    """, (service_name, service_version))
    vulnerabilities = cursor.fetchall()
    conn.close()
    return [{"cve_id": row[0], "description": row[1]} for row in vulnerabilities]

def version_is_vulnerable(service_version, affected_version):
    """
    Compares service version against a vulnerable version using semantic versioning.
    """
    try:
        return version.parse(service_version) == version.parse(affected_version)
    except ValueError:
        return False

# Example usage
if __name__ == "__main__":
    initialize_database()  # Ensure the database is set up
    fetch_vulnerability_data()  # Fetch and store vulnerability data
    
    service_name = "nginx"
    service_version = "1.16.1"
    
    vulnerabilities = assess_vulnerabilities(service_name, service_version)
    if vulnerabilities:
        for vuln in vulnerabilities:
            print(f"Vulnerability found: {vuln['cve_id']} - {vuln['description']}")
    else:
        print("No vulnerabilities found for this service.")
