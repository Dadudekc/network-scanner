import unittest
from unittest.mock import patch, MagicMock
import sqlite3
from vulnerability_assessment import (
    initialize_database,
    fetch_vulnerability_data,
    assess_vulnerabilities,
    version_is_vulnerable,
)

class TestVulnerabilityAssessment(unittest.TestCase):
    @patch('sqlite3.connect')
    def test_initialize_database(self, mock_connect):
        # Mock the database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor

        # Test database initialization
        initialize_database()

        # Verify table creation query execution
        mock_cursor.execute.assert_called_once_with("""
    CREATE TABLE IF NOT EXISTS vulnerabilities (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        cve_id TEXT NOT NULL,
        description TEXT NOT NULL,
        service_name TEXT NOT NULL,
        service_version TEXT NOT NULL
    )
    """)
        mock_conn.commit.assert_called_once()
        mock_conn.close.assert_called_once()

    @patch('sqlite3.connect')
    def test_fetch_vulnerability_data(self, mock_connect):
        # Mock the database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor

        # Test fetch_vulnerability_data function
        fetch_vulnerability_data()

        # Verify data insertion query
        mock_cursor.execute.assert_called_once_with("""
            INSERT INTO vulnerabilities (cve_id, description, service_name, service_version)
            VALUES (?, ?, ?, ?)
            """, ('CVE-2021-1234', 'Example vulnerability affecting nginx 1.16.1', 'nginx', '1.16.1'))
        mock_conn.commit.assert_called_once()
        mock_conn.close.assert_called_once()

    @patch('sqlite3.connect')
    def test_assess_vulnerabilities(self, mock_connect):
        # Mock the database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor

        # Mock the database query result
        mock_cursor.fetchall.return_value = [
            ("CVE-2021-1234", "Example vulnerability affecting nginx 1.16.1")
        ]

        # Test assess_vulnerabilities function
        vulnerabilities = assess_vulnerabilities("nginx", "1.16.1")

        # Verify query execution
        mock_cursor.execute.assert_called_once_with("""
    SELECT cve_id, description FROM vulnerabilities
    WHERE service_name = ? AND service_version = ?
    """, ("nginx", "1.16.1"))

        # Validate the result
        self.assertEqual(len(vulnerabilities), 1)
        self.assertEqual(vulnerabilities[0]["cve_id"], "CVE-2021-1234")
        self.assertEqual(vulnerabilities[0]["description"], "Example vulnerability affecting nginx 1.16.1")

    def test_version_is_vulnerable(self):
        # Test version comparison
        self.assertTrue(version_is_vulnerable("1.16.1", "1.16.1"))
        self.assertFalse(version_is_vulnerable("1.16.1", "1.17.0"))
        self.assertFalse(version_is_vulnerable("invalid_version", "1.16.1"))

if __name__ == "__main__":
    unittest.main()
